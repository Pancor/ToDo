buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
        javaFxSpringVersion = '1.3.2'
        javaFxSpringTestVersion = '1.0'
    }
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'http://archiva.nowatel.com:8080/repository/internal'
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.0.5'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

version '1.0-SNAPSHOT'

sourceCompatibility = 11.0

repositories {
    mavenLocal()
    jcenter()
    maven {
        url 'http://archiva.nowatel.com:8080/repository/internal'
    }
    maven {
        url 'http://archiva.nowatel.com:8080/repository/snapshots'
    }
    flatDir {
        dirs 'libs'
    }
}

javafx {
    version = "11.0.1"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

dependencies {
    compile "com.nowatel:javafxspring:${javaFxSpringVersion}"
    testCompile "com.nowatel:javafxspringtest:${javaFxSpringTestVersion}"

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.testfx:testfx-core:4.0.15-alpha"
    testCompile "org.testfx:testfx-junit:4.0.15-alpha"
    testCompile 'junit:junit:4.12'
    testCompile "org.testfx:openjfx-monocle:jdk-11+26"
}

//integration test

sourceSets {
    testIntegration {
        compileClasspath += sourceSets.main.output + configurations.testCompile
        runtimeClasspath += output + compileClasspath + configurations.testRuntime
    }
}

configurations {
    testIntegrationCompile.extendsFrom testCompile
    testIntegrationRuntime.extendsFrom testRuntime
}


task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testLogging {
        exceptionFormat = 'full'
    }

    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
    outputs.upToDateWhen { false }
    shouldRunAfter test
}

check.dependsOn integrationTest